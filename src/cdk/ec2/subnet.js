"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSubnet = void 0;
const ec2 = require("aws-cdk-lib/aws-ec2");
const instance_type_1 = require("./type/instance.type");
const getSubnet = (scope, type, availabilityZone) => {
    switch (type) {
        case instance_type_1.AccessScopeType.PUBLIC:
            return availabilityZone === instance_type_1.AvailabilityZoneType.AP_NORTHEAST_2A ? getPublicSubnet01(scope) : getPublicSubnet02(scope);
        case instance_type_1.AccessScopeType.PRIVATE:
            return availabilityZone === instance_type_1.AvailabilityZoneType.AP_NORTHEAST_2A ? getPrivateSubnet01(scope) : getPrivateSubnet02(scope);
        case instance_type_1.AccessScopeType.DATABASE:
            return availabilityZone === instance_type_1.AvailabilityZoneType.AP_NORTHEAST_2A ? getDatabaseSubnet01(scope) : getDatabaseSubnet02(scope);
    }
};
exports.getSubnet = getSubnet;
const getPublicSubnet01 = (scope) => {
    return ec2.Subnet.fromSubnetAttributes(scope, "PublicSubnet01", {
        availabilityZone: "ap-northeast-2a",
        subnetId: "subnet-043aec505f84e38ac"
    });
};
const getPublicSubnet02 = (scope) => {
    return ec2.Subnet.fromSubnetAttributes(scope, "PublicSubnet02", {
        availabilityZone: "ap-northeast-2c",
        subnetId: "subnet-07c1a5153af279dab"
    });
};
const getPrivateSubnet01 = (scope) => {
    return ec2.Subnet.fromSubnetAttributes(scope, "PrivateSubnet01", {
        availabilityZone: "ap-northeast-2a",
        subnetId: "subnet-08ad678f10d1751f9"
    });
};
const getPrivateSubnet02 = (scope) => {
    return ec2.Subnet.fromSubnetAttributes(scope, "PrivateSubnet02", {
        availabilityZone: "ap-northeast-2c",
        subnetId: "subnet-083b485efbc75aee3",
    });
};
const getDatabaseSubnet01 = (scope) => {
    return ec2.Subnet.fromSubnetAttributes(scope, "DatabaseSubnet01", {
        availabilityZone: "ap-northeast-2a",
        subnetId: "subnet-0ae4bdd1cd591ffc2"
    });
};
const getDatabaseSubnet02 = (scope) => {
    return ec2.Subnet.fromSubnetAttributes(scope, "DatabaseSubnet01", {
        availabilityZone: "ap-northeast-2c",
        subnetId: "subnet-0479679bc8347e57e"
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VibmV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3VibmV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUEyQztBQUUzQyx3REFBMEc7QUFFbkcsTUFBTSxTQUFTLEdBQUcsQ0FBQyxLQUFnQixFQUFFLElBQWlCLEVBQUUsZ0JBQWtDLEVBQUUsRUFBRTtJQUNqRyxRQUFRLElBQUksRUFBRTtRQUNWLEtBQUssK0JBQWUsQ0FBQyxNQUFNO1lBQ3ZCLE9BQU8sZ0JBQWdCLEtBQUssb0NBQW9CLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0gsS0FBSywrQkFBZSxDQUFDLE9BQU87WUFDeEIsT0FBTyxnQkFBZ0IsS0FBSyxvQ0FBb0IsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3SCxLQUFLLCtCQUFlLENBQUMsUUFBUTtZQUN6QixPQUFPLGdCQUFnQixLQUFLLG9DQUFvQixDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ2xJO0FBQ0wsQ0FBQyxDQUFBO0FBVFksUUFBQSxTQUFTLGFBU3JCO0FBRUQsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLEtBQWdCLEVBQUUsRUFBRTtJQUMzQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLGdCQUFnQixFQUFFO1FBQzVELGdCQUFnQixFQUFFLGlCQUFpQjtRQUNuQyxRQUFRLEVBQUUsMEJBQTBCO0tBQ3ZDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQTtBQUVELE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxLQUFnQixFQUFFLEVBQUU7SUFDM0MsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRTtRQUM1RCxnQkFBZ0IsRUFBRSxpQkFBaUI7UUFDbkMsUUFBUSxFQUFFLDBCQUEwQjtLQUN2QyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUE7QUFFRCxNQUFNLGtCQUFrQixHQUFHLENBQUMsS0FBZ0IsRUFBRSxFQUFFO0lBQzVDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLEVBQUU7UUFDN0QsZ0JBQWdCLEVBQUUsaUJBQWlCO1FBQ25DLFFBQVEsRUFBRSwwQkFBMEI7S0FDdkMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFBO0FBRUQsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEtBQWdCLEVBQUUsRUFBRTtJQUM1QyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLGlCQUFpQixFQUFFO1FBQzdELGdCQUFnQixFQUFFLGlCQUFpQjtRQUNuQyxRQUFRLEVBQUUsMEJBQTBCO0tBQ3ZDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQTtBQUVELE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxLQUFnQixFQUFFLEVBQUU7SUFDN0MsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLEtBQUssRUFBRSxrQkFBa0IsRUFBRTtRQUM5RCxnQkFBZ0IsRUFBRSxpQkFBaUI7UUFDbkMsUUFBUSxFQUFFLDBCQUEwQjtLQUN2QyxDQUFDLENBQUE7QUFDTixDQUFDLENBQUE7QUFFRCxNQUFNLG1CQUFtQixHQUFHLENBQUMsS0FBZ0IsRUFBRSxFQUFFO0lBQzdDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLEVBQUU7UUFDOUQsZ0JBQWdCLEVBQUUsaUJBQWlCO1FBQ25DLFFBQVEsRUFBRSwwQkFBMEI7S0FDdkMsQ0FBQyxDQUFBO0FBQ04sQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZWMyIGZyb20gJ2F3cy1jZGstbGliL2F3cy1lYzInO1xuaW1wb3J0IHtDb25zdHJ1Y3R9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQge0FjY2Vzc1Njb3BlLCBBY2Nlc3NTY29wZVR5cGUsIEF2YWlsYWJpbGl0eVpvbmUsIEF2YWlsYWJpbGl0eVpvbmVUeXBlfSBmcm9tIFwiLi90eXBlL2luc3RhbmNlLnR5cGVcIjtcblxuZXhwb3J0IGNvbnN0IGdldFN1Ym5ldCA9IChzY29wZTogQ29uc3RydWN0LCB0eXBlOiBBY2Nlc3NTY29wZSwgYXZhaWxhYmlsaXR5Wm9uZTogQXZhaWxhYmlsaXR5Wm9uZSkgPT4ge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIEFjY2Vzc1Njb3BlVHlwZS5QVUJMSUM6XG4gICAgICAgICAgICByZXR1cm4gYXZhaWxhYmlsaXR5Wm9uZSA9PT0gQXZhaWxhYmlsaXR5Wm9uZVR5cGUuQVBfTk9SVEhFQVNUXzJBID8gZ2V0UHVibGljU3VibmV0MDEoc2NvcGUpIDogZ2V0UHVibGljU3VibmV0MDIoc2NvcGUpO1xuICAgICAgICBjYXNlIEFjY2Vzc1Njb3BlVHlwZS5QUklWQVRFOlxuICAgICAgICAgICAgcmV0dXJuIGF2YWlsYWJpbGl0eVpvbmUgPT09IEF2YWlsYWJpbGl0eVpvbmVUeXBlLkFQX05PUlRIRUFTVF8yQSA/IGdldFByaXZhdGVTdWJuZXQwMShzY29wZSkgOiBnZXRQcml2YXRlU3VibmV0MDIoc2NvcGUpO1xuICAgICAgICBjYXNlIEFjY2Vzc1Njb3BlVHlwZS5EQVRBQkFTRTpcbiAgICAgICAgICAgIHJldHVybiBhdmFpbGFiaWxpdHlab25lID09PSBBdmFpbGFiaWxpdHlab25lVHlwZS5BUF9OT1JUSEVBU1RfMkEgPyBnZXREYXRhYmFzZVN1Ym5ldDAxKHNjb3BlKSA6IGdldERhdGFiYXNlU3VibmV0MDIoc2NvcGUpO1xuICAgIH1cbn1cblxuY29uc3QgZ2V0UHVibGljU3VibmV0MDEgPSAoc2NvcGU6IENvbnN0cnVjdCkgPT4ge1xuICAgIHJldHVybiBlYzIuU3VibmV0LmZyb21TdWJuZXRBdHRyaWJ1dGVzKHNjb3BlLCBcIlB1YmxpY1N1Ym5ldDAxXCIsIHtcbiAgICAgICAgYXZhaWxhYmlsaXR5Wm9uZTogXCJhcC1ub3J0aGVhc3QtMmFcIixcbiAgICAgICAgc3VibmV0SWQ6IFwic3VibmV0LTA0M2FlYzUwNWY4NGUzOGFjXCJcbiAgICB9KTtcbn1cblxuY29uc3QgZ2V0UHVibGljU3VibmV0MDIgPSAoc2NvcGU6IENvbnN0cnVjdCkgPT4ge1xuICAgIHJldHVybiBlYzIuU3VibmV0LmZyb21TdWJuZXRBdHRyaWJ1dGVzKHNjb3BlLCBcIlB1YmxpY1N1Ym5ldDAyXCIsIHtcbiAgICAgICAgYXZhaWxhYmlsaXR5Wm9uZTogXCJhcC1ub3J0aGVhc3QtMmNcIixcbiAgICAgICAgc3VibmV0SWQ6IFwic3VibmV0LTA3YzFhNTE1M2FmMjc5ZGFiXCJcbiAgICB9KTtcbn1cblxuY29uc3QgZ2V0UHJpdmF0ZVN1Ym5ldDAxID0gKHNjb3BlOiBDb25zdHJ1Y3QpID0+IHtcbiAgICByZXR1cm4gZWMyLlN1Ym5ldC5mcm9tU3VibmV0QXR0cmlidXRlcyhzY29wZSwgXCJQcml2YXRlU3VibmV0MDFcIiwge1xuICAgICAgICBhdmFpbGFiaWxpdHlab25lOiBcImFwLW5vcnRoZWFzdC0yYVwiLFxuICAgICAgICBzdWJuZXRJZDogXCJzdWJuZXQtMDhhZDY3OGYxMGQxNzUxZjlcIlxuICAgIH0pO1xufVxuXG5jb25zdCBnZXRQcml2YXRlU3VibmV0MDIgPSAoc2NvcGU6IENvbnN0cnVjdCkgPT4ge1xuICAgIHJldHVybiBlYzIuU3VibmV0LmZyb21TdWJuZXRBdHRyaWJ1dGVzKHNjb3BlLCBcIlByaXZhdGVTdWJuZXQwMlwiLCB7XG4gICAgICAgIGF2YWlsYWJpbGl0eVpvbmU6IFwiYXAtbm9ydGhlYXN0LTJjXCIsXG4gICAgICAgIHN1Ym5ldElkOiBcInN1Ym5ldC0wODNiNDg1ZWZiYzc1YWVlM1wiLFxuICAgIH0pO1xufVxuXG5jb25zdCBnZXREYXRhYmFzZVN1Ym5ldDAxID0gKHNjb3BlOiBDb25zdHJ1Y3QpID0+IHtcbiAgICByZXR1cm4gZWMyLlN1Ym5ldC5mcm9tU3VibmV0QXR0cmlidXRlcyhzY29wZSwgXCJEYXRhYmFzZVN1Ym5ldDAxXCIsIHtcbiAgICAgICAgYXZhaWxhYmlsaXR5Wm9uZTogXCJhcC1ub3J0aGVhc3QtMmFcIixcbiAgICAgICAgc3VibmV0SWQ6IFwic3VibmV0LTBhZTRiZGQxY2Q1OTFmZmMyXCJcbiAgICB9KVxufVxuXG5jb25zdCBnZXREYXRhYmFzZVN1Ym5ldDAyID0gKHNjb3BlOiBDb25zdHJ1Y3QpID0+IHtcbiAgICByZXR1cm4gZWMyLlN1Ym5ldC5mcm9tU3VibmV0QXR0cmlidXRlcyhzY29wZSwgXCJEYXRhYmFzZVN1Ym5ldDAxXCIsIHtcbiAgICAgICAgYXZhaWxhYmlsaXR5Wm9uZTogXCJhcC1ub3J0aGVhc3QtMmNcIixcbiAgICAgICAgc3VibmV0SWQ6IFwic3VibmV0LTA0Nzk2NzliYzgzNDdlNTdlXCJcbiAgICB9KVxufVxuIl19